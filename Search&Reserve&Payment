import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoomReservation extends JFrame implements ActionListener {

private JButton showAvailableRoomButton;
private JButton viewReservedRoomButton;
private JButton paymentOptionsButton;
private JButton logoutButton;
private JPanel mainPanel;
private JPanel buttonPanel;
private JPanel availableRoomsPanel;
private JPanel reservedRoomsPanel;
private JPanel paymentPanel;
private List<String> reservedRooms;
private Map<String, String> roomTypes;
private Map<String, String> amenities;
private Map<String, Double> roomPrices;
private Map<String, Boolean> paymentStatus;
private String selectedRoom;
private JTextField amountField;
private JButton payButton;

public RoomReservation() {
    setTitle("HOTEL GOSO");
    setSize(800, 650);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    JLabel welcomeLabel = new JLabel("Welcome to HOTEL GOSO, where comfort embraces you like a warm, familiar hug.\n Where guests become cherished family.");
    welcomeLabel.setHorizontalAlignment(SwingConstants.CENTER);
    add(welcomeLabel, BorderLayout.NORTH);

    showAvailableRoomButton = new JButton("Show Available Rooms");
    viewReservedRoomButton = new JButton("View Reserved Rooms");
    paymentOptionsButton = new JButton("Pay Here");
    logoutButton = new JButton("Logout");

    buttonPanel = new JPanel(new GridLayout(2, 2));
    buttonPanel.add(showAvailableRoomButton);
    buttonPanel.add(viewReservedRoomButton);
    buttonPanel.add(paymentOptionsButton);
    buttonPanel.add(logoutButton);

    showAvailableRoomButton.addActionListener(this);
    viewReservedRoomButton.addActionListener(this);
    paymentOptionsButton.addActionListener(this);
    logoutButton.addActionListener(this);

    mainPanel = new JPanel(new BorderLayout());
    mainPanel.add(buttonPanel, BorderLayout.CENTER);

    availableRoomsPanel = new JPanel(new GridLayout(11, 5));
    reservedRoomsPanel = new JPanel(new GridLayout(11, 5));
    paymentPanel = new JPanel(new GridLayout(11, 5));

    reservedRooms = new ArrayList<>();

    roomTypes = new HashMap<>();
    roomTypes.put("STANDARD", "Room 1-10");
    roomTypes.put("DELUXE", "Room 11-20");
    roomTypes.put("SUITE", "Room 21-30");
    roomTypes.put("EXECUTIVE", "Room 31-40");
    roomTypes.put("PREMIUM", "Room 41-50");
    roomTypes.put("PENTHOUSE", "Room 51-55");

    amenities = new HashMap<>();
    amenities.put("STANDARD", "It includes a bed, a private bathroom, a desk, and basic furniture.");
    amenities.put("DELUXE", "It includes a larger bed, a seating area, a work desk, and upgraded furnishings.");
    amenities.put("SUITE", "It includes additional amenities like a kitchenette, a dining table, and a private balcony. \nSuites are ideal for guests seeking more space and privacy.");
    amenities.put("EXECUTIVE", "Designed for business travelers, executive rooms are equipped with features to facilitate work-related activities. \nThey often include a spacious work desk, ergonomic chair, enhanced lighting, \nand extra connectivity options such as high-speed internet access.");
    amenities.put("PREMIUM", "Consists of two or more separate rooms with a connecting door, allowing guests to move between them without having to go through the hallway. \nThey are suitable for families or groups who prefer the convenience of staying close together.");
    amenities.put("PENTHOUSE", "The pinnacle of luxury, a penthouse suite is located on the top floor of a hotel and offers panoramic views. \nIt typically features multiple bedrooms, a spacious living area, a fully equipped kitchen, a private terrace or balcony, \nand exclusive services such as a dedicated concierge.");

    roomPrices = new HashMap<>();
    roomPrices.put("STANDARD", 1000.0);
    roomPrices.put("DELUXE", 2000.0);
    roomPrices.put("SUITE", 5000.0);
    roomPrices.put("EXECUTIVE", 5500.0);
    roomPrices.put("PREMIUM", 6500.0);
    roomPrices.put("PENTHOUSE", 7500.0);

    paymentStatus = new HashMap<>();

    add(mainPanel, BorderLayout.CENTER);

    setVisible(true);
}

private void displayAvailableRooms() {
    availableRoomsPanel.removeAll();

    for (int i = 1; i <= 55; i++) {
        String roomType = getRoomType(i);
        String roomInfo = "Room " + i + " (" + roomType + ") - Price: P" + roomPrices.get(roomType);
        JButton roomButton = new JButton(roomInfo);
        roomButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                selectedRoom = roomInfo;
                showRoomInformation(roomType);
            }
        });
        availableRoomsPanel.add(roomButton);
    }

    JScrollPane scrollPane = new JScrollPane(availableRoomsPanel);

    JOptionPane.showMessageDialog(this, scrollPane, "Available Rooms", JOptionPane.PLAIN_MESSAGE);
}

private void displayReservedRooms() {
    reservedRoomsPanel.removeAll();

    for (String room : reservedRooms) {
        String roomStatus = paymentStatus.getOrDefault(room, false) ? "Paid" : "Not Paid";
        JLabel roomLabel = new JLabel("Reserved Room " + room + " - Status: " + roomStatus);
        reservedRoomsPanel.add(roomLabel);
    }

    JScrollPane scrollPane = new JScrollPane(reservedRoomsPanel);

    JOptionPane.showMessageDialog(this, scrollPane, "Reserved Rooms", JOptionPane.PLAIN_MESSAGE);
}

private void reserveRoom(String roomNumber) {
    if (reservedRooms.contains(roomNumber)) {
        JOptionPane.showMessageDialog(this, "Room " + roomNumber + " is already reserved.", "Reservation Error", JOptionPane.ERROR_MESSAGE);
    } else {
        reservedRooms.add(roomNumber);
        paymentStatus.put(roomNumber, false);
        JOptionPane.showMessageDialog(this, "Reservation created for Room " + roomNumber, "Reservation Confirmation", JOptionPane.INFORMATION_MESSAGE);
    }
}

private void showRoomInformation(String roomType) {
    String roomAmenities = amenities.get(roomType);
    int option = JOptionPane.showOptionDialog(this, "Room Type: " + roomType + "\nAmenities: " + roomAmenities, "Room Information", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"Back", "RESERVE THIS ROOM"}, "Back");
    if (option == 1) {
        reserveRoom(selectedRoom);
    }
}

@Override
public void actionPerformed(ActionEvent e) {
    if (e.getSource() == showAvailableRoomButton) {
        displayAvailableRooms();
    } else if (e.getSource() == viewReservedRoomButton) {
        displayReservedRooms();
    } else if (e.getSource() == paymentOptionsButton) {
        displayPaymentOptions();
    } else if (e.getSource() == logoutButton) {
        logoutUser();
    }
}

private void displayPaymentOptions() {
    JFrame paymentFrame = new JFrame("Payment");
    JPanel paymentPanel = new JPanel(new FlowLayout());
    JTextField amountField = new JTextField(10);
    JButton payButton = new JButton("Pay");

    payButton.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            double amount = Double.parseDouble(amountField.getText());
            String roomNumber = selectedRoom.substring(5, selectedRoom.indexOf("(")).trim();
            if (amount != roomPrices.get(getRoomType(Integer.parseInt(roomNumber)))) {
                JOptionPane.showMessageDialog(paymentFrame, "Invalid amount. Please enter the exact amount to pay.", "Payment Error", JOptionPane.ERROR_MESSAGE);
            } else if (paymentStatus.getOrDefault(roomNumber, false)) {
                JOptionPane.showMessageDialog(paymentFrame, "Payment already made for Room " + roomNumber + ".", "Payment Error", JOptionPane.ERROR_MESSAGE);
            } else {
                paymentStatus.put(roomNumber, true);
                JOptionPane.showMessageDialog(paymentFrame, "Payment successful. Amount: P" + amount + "\nRoom " + roomNumber + " marked as paid.", "Payment Confirmation", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });

    paymentPanel.add(new JLabel("Enter Amount:"));
    paymentPanel.add(amountField);
    paymentPanel.add(payButton);

    paymentFrame.getContentPane().add(paymentPanel);
    paymentFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    paymentFrame.setSize(300, 150);
    paymentFrame.setVisible(true);
}

private String getRoomType(int roomNumber) {
    if (roomNumber >= 1 && roomNumber <= 10) {
        return "STANDARD";
    } else if (roomNumber >= 11 && roomNumber <= 20) {
        return "DELUXE";
    } else if (roomNumber >= 21 && roomNumber <= 30) {
        return "SUITE";
    } else if (roomNumber >= 31 && roomNumber <= 40) {
        return "EXECUTIVE";
    } else if (roomNumber >= 41 && roomNumber <= 50) {
        return "PREMIUM";
    } else if (roomNumber >= 51 && roomNumber <= 55) {
        return "PENTHOUSE";
    } else {
        return "Not available";
    }
}

private void logoutUser() {
    int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "Logout", JOptionPane.YES_NO_OPTION);
    if (option == JOptionPane.YES_OPTION) {
        JOptionPane.showMessageDialog(this, "You have been logged out.", "Logout", JOptionPane.INFORMATION_MESSAGE);
        dispose();
    }
}

public static void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
        public void run() {
            new RoomReservation();
        }
    });
}

}
